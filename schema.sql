CREATE TABLE users (
  user_id varchar PRIMARY KEY, -- Clerk user ID
  created_at timestamp DEFAULT now()
);

CREATE TABLE discourse (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id varchar UNIQUE NOT NULL, -- VAPI session ID for audio retrieval
  user_id varchar NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  session_type varchar NOT NULL, -- 'language_tutor' or 'brainstorming' (quiz isn't being added)
  title text NOT NULL, -- e.g., "hospital clerk and patient" for languages,
  description text NOT NULL,
  feedback text NOT NULL, -- Markdown feedback from VAPI
  duration integer NOT NULL,
  
  -- Language-specific fields (NULL for brainstorming sessions)
  language varchar,
  proficiency_level varchar,
  formality varchar,
  role_scenario text, 
  target_vocabulary text[], -- Array of words to focus on
  
  created_at timestamp DEFAULT now(),
  
  -- Constraints
  CONSTRAINT valid_duration CHECK (duration > 0 AND duration <= 3600), -- Max 1 hour
  CONSTRAINT valid_session_type CHECK (session_type IN ('language_tutor', 'brainstorming'))
);

CREATE TABLE user_vocabulary (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id varchar NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  language varchar NOT NULL,
  word varchar NOT NULL,
  translation varchar NOT NULL,
  part_of_speech varchar,
  source varchar NOT NULL, -- 'conversation', 'quiz', 'grammar_example'
  source_session_id varchar, -- Link back to where they learned it
  created_at timestamp DEFAULT now(),
  
  -- Prevent duplicates
  UNIQUE(user_id, language, word) -- explain this, do you mean all three together must be unique, so the same word can appear twice but not for the same person, right?
);


CREATE TABLE quiz_question_history (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id varchar NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  language varchar NOT NULL,
  -- quiz_attempt_id uuid NOT NULL REFERENCES quiz_attempts(id) ON DELETE CASCADE,
  question_text jsonb NOT NULL, -- it's generated in json format, what's the difference between jsonb and json
  quiz_type varchar NOT NULL, -- 'vocabulary', 'grammar'
  -- I'm not creating a single line for every question generated, just one file session
  key_words jsonb NOT NULL, -- generated by the ai when generating the questions
  high_score integer NOT NULL DEFAULT 0,
  created_at timestamp DEFAULT now()
);

-- =============================================
-- INDEXES for Performance
-- =============================================

-- Main query indexes
CREATE INDEX idx_discourse_user_id ON discourse(user_id);
CREATE INDEX idx_discourse_created_at ON discourse(created_at);
CREATE INDEX idx_discourse_session_type ON discourse(session_type);
CREATE INDEX idx_discourse_language ON discourse(language);

-- Vocabulary indexes
CREATE INDEX idx_user_vocabulary_user_language ON user_vocabulary(user_id, language);
CREATE INDEX idx_user_vocabulary_last_seen ON user_vocabulary(last_seen);
CREATE INDEX idx_user_vocabulary_source ON user_vocabulary(source);

-- Quiz indexes
CREATE INDEX idx_quiz_question_history_user_id ON quiz_question_history(user_id);

-- =============================================
-- ROW LEVEL SECURITY (RLS) Policies
-- =============================================

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE discourse ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_vocabulary ENABLE ROW LEVEL SECURITY;
ALTER TABLE quiz_question_history ENABLE ROW LEVEL SECURITY;

-- Create policies - users can only access their own data
CREATE POLICY "Users can only access their own data" ON users
  FOR ALL USING (auth.jwt() ->> 'sub' = user_id);

CREATE POLICY "Users can only access their own discourse" ON discourse
  FOR ALL USING (auth.jwt() ->> 'sub' = user_id);

CREATE POLICY "Users can only access their own vocabulary" ON user_vocabulary
  FOR ALL USING (auth.jwt() ->> 'sub' = user_id);

CREATE POLICY "Users can only access their own quiz history" ON quiz_question_history
  FOR ALL USING (auth.jwt() ->> 'sub' = user_id);

